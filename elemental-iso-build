#!/bin/bash
set -e

build()
{
    dockerfile | docker build -f - --build-arg IMAGE="${IMAGE}" . "${@}"
}

dockerfile()
{
    cat << "EOF"
ARG IMAGE=ghcr.io/rancher-sandbox/rancher-node-image:latest

FROM ${IMAGE} AS os

FROM registry.opensuse.org/home/kwk/elemental/images/opensuse_leap_15.3/rancher/ros-builder-image-opensuse/15.3 AS tools
ENV LUET_NOLOCK=true

RUN cd /usr/src && \
    git clone https://github.com/rancher-sandbox/cOS-toolkit

RUN mkdir -p /iso/iso-overlay/boot/grub2 /etc/luet
RUN echo -e \
'logging:\n'\
'  color: false\n'\
'  enable_emoji: false\n'\
'general:\n'\
'   debug: false\n'\
'   spinner_charset: 9\n'\
'repositories:\n'\
'- name: "cos-toolkit-green-amd64"\n'\
'  type: "docker"\n'\
'  enable: true\n'\
'  arch: amd64\n'\
'  urls:\n'\
'  - "quay.io/costoolkit/releases-green"\n'\
'- name: "cos-toolkit-green"\n'\
'  type: "docker"\n'\
'  enable: true\n'\
'  arch: arm64\n'\
'  urls:\n'\
'  - "quay.io/costoolkit/releases-green-arm64"\n' > /etc/luet/luet.yaml

RUN echo -e \
'search --file --set=root /boot/kernel.xz\n'\
'set default=0\n'\
'set timeout=10\n'\
'set timeout_style=menu\n'\
'set linux=linux\n'\
'set initrd=initrd\n'\
'if [ "${grub_cpu}" = "x86_64" -o "${grub_cpu}" = "i386" -o "${grub_cpu}" = "arm64" ];then\n'\
'    if [ "${grub_platform}" = "efi" ]; then\n'\
'        if [ "${grub_cpu}" != "arm64" ]; then\n'\
'            set linux=linuxefi\n'\
'            set initrd=initrdefi\n'\
'        fi\n'\
'    fi\n'\
'fi\n'\
'if [ "${grub_platform}" = "efi" ]; then\n'\
'    echo "Please press 't' to show the boot menu on this console"\n'\
'fi\n'\
'set font=($root)/boot/${grub_cpu}/loader/grub2/fonts/unicode.pf2\n'\
'if [ -f ${font} ];then\n'\
'    loadfont ${font}\n'\
'fi\n'\
'menuentry "RancherOS Install" --class os --unrestricted {\n'\
'    echo Loading kernel...\n'\
'    $linux ($root)/boot/kernel.xz cdroot root=live:CDLABEL=COS_LIVE rd.live.dir=/ rd.live.squashimg=rootfs.squashfs console=tty1 console=ttyS0 rd.cos.disable rancheros.install.automatic=true rancheros.install.config_url=/run/initramfs/live/config\n'\
'    echo Loading initrd...\n'\
'    $initrd ($root)/boot/rootfs.xz\n'\
'}\n'\
'\n'\
'if [ "${grub_platform}" = "efi" ]; then\n'\
'    hiddenentry "Text mode" --hotkey "t" {\n'\
'        set textmode=true\n'\
'        terminal_output console\n'\
'    }\n'\
'fi\n' > /iso/iso-overlay/boot/grub2/grub.cfg
RUN echo -e '#cloud-config\n'\
'rancheros:\n'\
'  install:\n'\
'    automatic: false\n' > /iso/iso-overlay/config
#unneeded - RUN luet install --no-spinner -y toolchain/elemental-cli
ARG CONFIG
RUN if [ -n "$CONFIG" ]; then echo "$CONFIG" > /iso/iso-overlay/config; fi
WORKDIR /iso

FROM tools AS iso-build
COPY --from=os / /iso/overlay
RUN cd /iso && \
    elemental --debug build-iso -n output --overlay-iso /iso/iso-overlay /iso/overlay
EOF
}

iso()
{
    if [ -n "$CONFIG" ]; then
        CONFIG_DATA="$(<$CONFIG)"
    fi
    build --target iso -o build/ --build-arg CONFIG="${CONFIG_DATA}"
}

usage()
{
    echo "Usage:"
    echo "    $0 IMAGE OUTPUT [ISO_CLOUD_CONFIG]"
    echo
    echo "    IMAGE: a Docker image"
    echo "    OUTPUT: Comma seperated value of output image formats. Valid: iso"
    echo "    ISO_CLOUD_CONFIG: An option file that will be used as the default cloud-init in an ISO"
}

IMAGE=$1
OUTPUT=$2
CONFIG=$3
VERSION=${IMAGE##*:}
GIT_COMMIT=${GIT_COMMIT:-HEAD}
NAME=${IMAGE%%:${VERSION}}
NAME=${NAME//[^a-zA-Z0-9-@.\/_]/-}
COS_VERSION=${COS_VERSION:-e95d49a66605d6622776391e95e175a80528e872}

if [ "$1" == dockerfile ]; then
    dockerfile
    exit 0
fi

if [ -z "${OUTPUT}" ] || [ -z "${IMAGE}" ] || echo "$@" | grep -q -- -h; then
    usage
    exit 1
fi

{
    IFS=,
    for i in ${OUTPUT}; do
        case $i in
            iso)
                iso
                ;;
            *)
                echo Unknown format $i
                echo
                usage
                exit 1
        esac
    done
}
